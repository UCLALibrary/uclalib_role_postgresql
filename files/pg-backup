#!/bin/bash

set -euo pipefail # abort at any unanticipated error

today="$(date +%Y-%m-%d)" # YYYY-MM-DD (ISO 8601)

# Default keep hot backups for two weeks
backup_age=14

# Default backup location. Usually a symlink to the real location.
# See the `-d`` option to override
directory=/var/lib/psqldump

# usage information (-h, or illegal option)
usage() {
  echo "${0##*/} [-h] [-b <days>] [-d <directory>]"; # lazy basename(1)
  echo "  -h this help"
  echo "  -d <directory> directory to save to"
  echo "     default: $directory"
  echo "  -b <days> days to keep backups"
  echo "     default: $backup_age"
  echo
  echo "Dumps the PostgreSQL cluster, and all databases therein."
  if [[ "$1" ]]; then
    echo ; echo "illegal option -- -$1"
  fi
}

# Print failed stage to stderr, letting cron alert us
failed() {
  status=$? # save exit code
  # direct stdout to saved stderr
  exec >&4
  echo "${1+$1 }failed: $status (line: ${BASH_LINENO[0]})"
  echo
  echo "==> log.txt <=="
  cat log.txt
}

# Handle unanticpated errors
trap failed ERR

# leading : lets us handle illegal options
while getopts :b:d:h arg; do
  case "$arg" in
    b) backup_age="$OPTARG" ;;
    d) directory="$OPTARG" ;;
    h) usage; exit 0 ;;
    *) usage "$arg"; exit 1 ;;
  esac
done

# Verify the backup_age is numeric.
case $backup_age in
  ''|*[!0-9]*) echo "-b must be numeric"; echo; usage; exit 1 ;;
esac

# Create dump directory based upon date, incrementing
# suffix until new one is created
base="$directory/$today"
suffix=""
increment=0
until [[ ! -d "$base$suffix" ]]; do
  : $(( increment++ ))
  suffix=".$increment"
done
target="$base$suffix"
mkdir -p "$target"
cd "$target"

# Save stdout/stderr file descriptors
exec 3<&1
exec 4<&2

# Log any/all output
exec > log.txt
exec 2>&1

# Dump the full cluster
pg_dumpall \
  --clean  \
  --if-exists \
| gzip -1 > "pg_cluster-$today.sql.gz" \
|| failed "pg_cluster"

# Dump individual databases
# global information (outside all single databases)
pg_dumpall \
  --file "pg_globals-$today.sql" \
  --globals-only \
|| failed "pg_globals"
# find, then loop over databases
databases="$(psql \
  --command 'SELECT datname FROM pg_database WHERE datistemplate = false;'\
  --pset format=unaligned \
  --tuples-only \
)"
for database in $databases; do
  pg_dump \
    --clean \
    --file "pg_$database-$today.d" \
    --format custom \
    --format directory \
    --if-exists \
    "$database" \
  || failed "pg_dump of $database"
done

cd .. # in case a relative directory is passed with -d

# Remove older backups
find -L "$directory" \
  -maxdepth 1 \
  -mtime +"${backup_age}" \
  -print0 \
  | xargs -0 \
    rm -rf
